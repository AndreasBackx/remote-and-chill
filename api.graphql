scalar DateTime

type User {
    # UUID of the user.
    id: ID!
    # Secret UUID of the user for authentication. Only visible for the authenticated user itself.
    secret: ID
    # Name of the user.
    name: String!
    # Moment when user is deleted/forgotten.
    expiresAt: DateTime!
}

type Group {
    # UUID of the group.
    id: ID!
    # Name of the group.
    name: String!
    # Creator of the group or another user if the creator left.
    owner: User!
    # Moment when user is deleted/forgotten.
    members: [User]!
}

type GroupResponse {
    user: User!
    group: Group!
}

type Mutation {
    # Create a group and a user.
    createGroup(name: String!, userName: String!): GroupResponse!
    # Join a group and create a user.
    joinGroup(groupId: ID!, userName: String!): GroupResponse!
    # Leave a group and delete your user.
    leaveGroup(groupId: ID!): GroupResponse!
    # Close a group, only the owner can close a group. Returns true if group was closed.
    closeGroup(groupId: ID!): Boolean!
}

type Query {
    users: [User]
    organizations: [Organization]
}

schema {
    query: Query
    mutation: Mutation
}
